diff --git a/boost/config/user.hpp b/boost/config/user.hpp
index cc268fe..5b7f5a4 100644
--- a/boost/config/user.hpp
+++ b/boost/config/user.hpp
@@ -21,6 +21,7 @@
 #define _GLIBCXX__PTHREADS 1
 #define BOOST_HAS_GETTIMEOFDAY 1
 #define BOOST_HAS_UNISTD_H 1
+#define BOOST_INTERPROCESS_POSIX_PROCESS_SHARED 1
 
 // define this to locate a compiler config file:
 // #define BOOST_COMPILER_CONFIG <myheader>
diff --git a/boost/interprocess/detail/atomic.hpp b/boost/interprocess/detail/atomic.hpp
index 71b7a55..dbfb2cd 100644
--- a/boost/interprocess/detail/atomic.hpp
+++ b/boost/interprocess/detail/atomic.hpp
@@ -265,7 +265,7 @@ inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val)
 }  //namespace interprocess{
 }  //namespace boost{
 
-#elif defined(__GNUC__) && ( __GNUC__ * 100 + __GNUC_MINOR__ >= 401 )
+#elif defined(__GNUC__) && ( __GNUC__ * 100 + __GNUC_MINOR__ >= 401 ) && !defined(ANDROID)
 
 namespace boost {
 namespace interprocess {
diff --git a/boost/interprocess/sync/posix/interprocess_condition.hpp b/boost/interprocess/sync/posix/interprocess_condition.hpp
index a506b61..fa97355 100644
--- a/boost/interprocess/sync/posix/interprocess_condition.hpp
+++ b/boost/interprocess/sync/posix/interprocess_condition.hpp
@@ -18,6 +18,7 @@ namespace interprocess {
 
 inline interprocess_condition::interprocess_condition()
 {
+#if !defined(ANDROID)
    int res;
    pthread_condattr_t cond_attr;
    res = pthread_condattr_init(&cond_attr);
@@ -34,6 +35,12 @@ inline interprocess_condition::interprocess_condition()
    if(res != 0){
       throw interprocess_exception(res);
    }
+#else
+   int res = pthread_cond_init(&m_condition, NULL);
+   if(res != 0){
+      throw interprocess_exception(res);
+   }
+#endif
 }
 
 inline interprocess_condition::~interprocess_condition()
diff --git a/boost/interprocess/sync/posix/pthread_helpers.hpp b/boost/interprocess/sync/posix/pthread_helpers.hpp
index e175b18..a429274 100644
--- a/boost/interprocess/sync/posix/pthread_helpers.hpp
+++ b/boost/interprocess/sync/posix/pthread_helpers.hpp
@@ -50,6 +50,7 @@ namespace detail{
       pthread_mutexattr_t m_attr;
    };
 
+#if !defined(ANDROID)
    //!Makes pthread_condattr_t cleanup easy when using exceptions
    struct condattr_wrapper 
    {
@@ -69,6 +70,7 @@ namespace detail{
 
       pthread_condattr_t m_attr;
    };
+#endif
 
    //!Makes initialized pthread_mutex_t cleanup easy when using exceptions
    class mutex_initializer
